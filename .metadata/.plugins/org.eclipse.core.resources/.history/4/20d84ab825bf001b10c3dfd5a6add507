package com.jhop.restservice;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class GameController {

	
	private GameServer gameServer;
	
	//Because this is a component, Spring creates a gameServer, and passes it in. 
	GameController(GameServer gameServer){
		this.gameServer = gameServer;
	}
	
	private static final String template = "Hello, %s %d!";
	private final AtomicLong counter = new AtomicLong();

	@GetMapping("/greeting")
	public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) {
		return new Greeting(counter.incrementAndGet(), String.format(template, name,gameServer.nextInt()));
	}

	@GetMapping("/another")
	public Greeting another(@RequestParam(value = "name", defaultValue = "World") String name) {
		return new Greeting(counter.incrementAndGet(), String.format("No not this %s %d", name,gameServer.nextInt()));
	}

	
	/*
	 *  startGame (send name)
	 *  
	 *  This will return the game id.  This is either a new game, or a game with an opponent.
	 *  If the name is already in an active game, this will return null.
	 *  
	 */
	@GetMapping("/startGame")
	public Game startGame(@RequestParam(value = "name", defaultValue = "Player1") String name) {
		
		Game game = gameServer.startGame(name);
		
		return game;
	}
	
	
	/*
	 * This just returns the state of the game.  This will return the state of the game board
	 * It will also return a status.  This can be 
	 * 
	 * awaiting_oponent
	 * YourMove
	 * TheirMove
	 * GameOver
	 * 
	 */
	@GetMapping("/getGameState")
	public Greeting waitForPlayer(@RequestParam(value = "gameID", defaultValue = "World") String name) {
		try {
			Thread.sleep(20000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return new Greeting(counter.incrementAndGet(), String.format("Slow but got there %s %d", name,gameServer.nextInt()));
	}
	
	/*
	 *  makeMove
	 *  
	 *  This will send a move.  This will return
	 *  Not_Your_Turn
	 *  OK
	 *  Invalid:<reason>
	 *  
	 *  
	 */
	

	/*
	 *  quit
	 *  
	 *  This leaves the game.  If the game was not won, then the other player wins by default
	 *  
	 */

	
	
	//  Considerations:
	//Polling isnt great, but it will handle well if there are lots of clients.  it scales.
	
	
}